{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","randomDate","start","end","Date","Math","random","startDate","endDate","useState","date","setDate","dayVisible","setDayVisible","className","onClick","e","toDateString","substring","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA6CeA,MA1Cf,WACE,IAAMC,EAAa,SAACC,EAAOC,GAEzB,OADW,IAAIC,MAAMF,EAAQG,KAAKC,UAAYH,EAAMD,KAIlDK,EAAY,IAAIH,KAAK,KAAM,EAAG,GAC9BI,EAAU,IAAIJ,KAAK,KAAM,GAAI,IAGjC,EAAwBK,mBAASR,EAAWM,EAAWC,IAAvD,mBAAOE,EAAP,KAAaC,EAAb,KAEA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAWA,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,eAElB,uBAAMA,UAAU,WAAhB,UACE,wBAAQA,UAAU,aAAaC,QAVlB,SAACC,GAClBL,EAAQV,EAAWM,EAAWC,IAC9BK,GAAc,IAQV,sBAGA,4BACID,EAAcF,EAAKO,eAAiBP,EAAKO,eAAeC,UAAU,KAEtE,wBAAQJ,UAAU,aAAaC,QApBlB,SAACC,GAClBH,GAAeD,IAmBX,wBCzBOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.59c280c2.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  const randomDate = (start, end) => {\n    let date = new Date(+start + Math.random() * (end - start));\n    return date;\n  }\n\n  let startDate = new Date(1900, 0, 1);\n  let endDate = new Date(2099, 11, 31);\n//  setDate(randomDate(startDate, endDate));\n\n  const [date, setDate] = useState(randomDate(startDate, endDate));\n\n  const [dayVisible, setDayVisible] = useState(false);\n\n  const onVisClick = (e) => {\n    setDayVisible(!dayVisible);\n  };\n\n  const onDayClick = (e) => {\n    setDate(randomDate(startDate, endDate));\n    setDayVisible(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <body className=\"App-body\">\n        <button className=\"App-button\" onClick={onDayClick}>\n          New Date\n        </button>\n        <p>\n          {(dayVisible) ? date.toDateString() : date.toDateString().substring(4)}\n        </p>\n        <button className=\"App-button\" onClick={onVisClick}>\n          Day\n        </button>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}